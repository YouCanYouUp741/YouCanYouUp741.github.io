<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法笔记01——数组</title>
    <link href="/2022/03/03/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
    <url>/2022/03/03/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="数组前缀和"><a href="#数组前缀和" class="headerlink" title="数组前缀和"></a>数组前缀和</h1><div class="note note-success">            <p>前缀和常常用来求子数组的值之和，比如求数组下标 i 到下标 j 之间的元素之和，我们如果用 i 到 j 迭代一个一个加，当然是可以做出答案，但是对于频繁需要计算这个值得话，就会很浪费时间，用前缀和能有效解决这个问题。</p>          </div><h2 id="一维数组前缀和"><a href="#一维数组前缀和" class="headerlink" title="一维数组前缀和"></a>一维数组前缀和</h2><p><img src="/img/blog01/image-20220302224233126.png"></p><p>对于这一题，可能会这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span> &#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] nums;<br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>     <span class="hljs-built_in">this</span>.nums = nums;<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left; i &lt;= right; i++) &#123;<br>     res += nums[i];<br>     &#125;<br>         <span class="hljs-keyword">return</span> res;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，可以达到效果，但是效率很差，因为 sumRange ⽅法会被频繁调⽤，⽽它的时间复杂度是 O(N)，其 中 N 代表 nums 数组的⻓度。 </p><p>这道题的最优解法是使⽤前缀和技巧，将 sumRange 函数的时间复杂度降为 O(1)，说⽩了就是不要在sumRange ⾥⾯⽤ for 循环，咋整？</p><p>核⼼思路是我们 new ⼀个新的数组 preSum 出来，preSum[i] 记录 nums[0..i-1] 的累加和.</p><p><img src="/img/blog01/image-20220302224621668.png"></p><p>看这个 preSum 数组，如果我想求索引区间 [1, 4] 内的所有元素之和，就可以通过 preSum[5] -preSum[1] 得出。 这样，sumRange 函数仅仅需要做⼀次减法运算，避免了每次进⾏ for 循环调⽤，最坏时间复杂度为常数O(1)。 </p><h2 id="二维矩阵中的前缀和"><a href="#二维矩阵中的前缀和" class="headerlink" title="二维矩阵中的前缀和"></a>二维矩阵中的前缀和</h2><p><img src="/img/blog01/image-20220302224916326.png"></p><p><img src="/img/blog01/image-20220302225020780.png"></p><p>如果我想计算红⾊的这个⼦矩阵的元素之和，可以⽤绿⾊矩阵减去蓝⾊矩阵减去橙⾊矩阵最后加上粉⾊矩阵，⽽绿蓝橙粉这四个矩阵有⼀个共同的特点，就是左上⻆就是 (0, 0) 原点。 那么我们可以维护⼀个⼆维 preSum 数组，专⻔记录以原点为顶点的矩阵的元素之和，就可以⽤⼏次加减运算算出任何⼀个⼦矩阵的元素和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumMatrix</span> &#123;<br><br>    <span class="hljs-comment">// 定义：preSum[i][j] 记录 matrix 中⼦矩阵 [0, 0, i-1, j-1] 的元素和</span><br>    <span class="hljs-type">int</span>[][] preSum;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length, n = matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span> || n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 构造前缀和矩阵</span><br>        preSum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; preSum.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; preSum[<span class="hljs-number">0</span>].length; j++) &#123;<br>                preSum[i][j] = preSum[i-<span class="hljs-number">1</span>][j]+preSum[i][j-<span class="hljs-number">1</span>]+matrix[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]-preSum[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumRegion</span><span class="hljs-params">(<span class="hljs-type">int</span> row1, <span class="hljs-type">int</span> col1, <span class="hljs-type">int</span> row2, <span class="hljs-type">int</span> col2)</span> &#123;<br>        <span class="hljs-keyword">return</span> preSum[row2+<span class="hljs-number">1</span>][col2+<span class="hljs-number">1</span>]-preSum[row2][col1+<span class="hljs-number">1</span>]-preSum[row1+<span class="hljs-number">1</span>][col2]+preSum[row1][col1];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，sumRegion 函数的时间复杂度也⽤前缀和技巧优化到了 O(1)，这是典型的「空间换时间」思路。 </p><p>再看一题。</p><p><img src="/img/blog01/image-20220302225527797.png"></p><p>这题如果按照上面的前缀和做法，就是把前缀和算出来，然后我把所有⼦数组都穷举出来，算它们的和，看看谁的和等于 k 不就⾏了，借助前缀和技巧很容易写出⼀个。但是这样写时间复杂度 O(N^2) 空间复杂度 O(N)，并不是最优的解法。不过通过这个解法理解了前缀和数组的⼯作原理之后，可以使⽤⼀些巧妙的办法把时间复杂度进⼀步降低。</p><p>优化的思路是：我直接记录下有⼏个 <strong>preSum[j]</strong> 和 <strong>preSum[i] - k</strong> 相等，直接更新结果，就避免了内层的 for 循环。我们可以⽤哈希表，在记录前缀和的同时记录该前缀和出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">subarraySum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-comment">// 前缀和map，保存前缀和以及该前缀和出现的次数</span><br>        Map&lt;Integer,Integer&gt; preSum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// base case</span><br>        preSum.put(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">// 前缀和为0表示第一个数之前的前缀和，对应第一个数直接就是 k 的情况</span><br><br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>, sum_i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; ++i) &#123;<br>            sum_i += nums[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum_j</span> <span class="hljs-operator">=</span> sum_i - k;  <span class="hljs-comment">// 找到满足 sum_i - sum_j = k 的sum_j</span><br>            <span class="hljs-comment">// 如果有这个前缀和，就res++</span><br>            <span class="hljs-keyword">if</span>(preSum.containsKey(sum_j))&#123;<br>                res += preSum.get(sum_j);<br>            &#125;<br>            <span class="hljs-comment">// 把前缀和 nums[0..i] 加⼊并记录出现次数</span><br>            preSum.put(sum_i, preSum.getOrDefault(sum_i, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>); <span class="hljs-comment">//把前缀和sum_i加入</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，就把时间复杂度降到了 O(N)，是最优解法了。 </p><p>前缀和技巧就讲到这⾥，应该说这个算法技巧是会者不难难者不会，实际运⽤中还是要多培养⾃⼰的思维灵 </p><p>活性，做到⼀眼看出题⽬是⼀个前缀和问题。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
      <tag>数组</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2022/03/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/03/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>这里是正文</p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
